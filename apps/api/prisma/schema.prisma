generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            String   @id @default(uuid())
  role              Role
  firstName         String
  lastName          String
  email             String   @unique
  phoneNumber       String   @unique
  passwordHash      String
  homeZipCode       String?
  profilePictureUrl String?
  stripeCustomerId  String?
  createdAt         DateTime @default(now())

  pilotProfile      PilotProfile?
  bookings          Booking[]
  adminActions      AdminAction[]
}

model AdminAction {
  actionId    String      @id @default(uuid())
  adminId     String
  actionType  AdminActionType
  targetId    String      // pilotId or userId
  details     Json?
  createdAt   DateTime    @default(now())

  admin       User        @relation(fields: [adminId], references: [userId])

  @@index([adminId])
  @@index([targetId])
  @@index([createdAt])
}

model PilotProfile {
  pilotId                 String     @id @default(uuid())
  userId                  String     @unique
  status                  PilotStatus
  bio                     String?
  faaLicenseUrl           String?
  officialIdUrl           String?    // Added for SOW requirement
  insuranceProofUrl       String?
  stripeConnectAccountId  String?
  stripeAccountStatus     StripeAccountStatus @default(PENDING)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  user                    User       @relation(fields: [userId], references: [userId])
  flights                 Flight[]
  pilotApplications       PilotApplication[]
}

model Flight {
  flightId                 String       @id @default(uuid())
  pilotId                  String
  launchLocation           Json
  meetupTimestamp          DateTime
  estimatedDurationMinutes Int
  pricePerSeat             Float
  totalSeats               Int
  seatsReserved            Int          @default(0)
  description              String?
  status                   FlightStatus @default(UPCOMING)
  stripeProductId          String?      // Added for Stripe integration
  stripePriceId            String?      // Added for Stripe integration
  stripePaymentLinkId      String?      // Added for Stripe integration
  platformFeePercentage    Float        @default(0.10) // 10% platform fee
  createdAt                DateTime     @default(now())

  pilot                    PilotProfile @relation(fields: [pilotId], references: [pilotId])
  bookings                 Booking[]

  @@index([meetupTimestamp])
  @@index([status])
  @@index([pilotId])
  @@index([createdAt])
}

model Booking {
  bookingId            String        @id @default(uuid())
  flightId             String
  passengerId          String
  numberOfSeats        Int
  totalAmountPaid      Float
  platformFee          Float
  pilotPayoutAmount    Float
  paymentStatus        PaymentStatus
  stripePaymentIntentId String?      @unique
  bookingTimestamp     DateTime      @default(now())

  flight               Flight        @relation(fields: [flightId], references: [flightId])
  passenger            User          @relation(fields: [passengerId], references: [userId])
  review               Review?

  @@index([flightId])
  @@index([passengerId])
  @@index([paymentStatus])
  @@index([bookingTimestamp])
}

model Review {
  reviewId   String   @id @default(uuid())
  bookingId  String   @unique
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  booking    Booking  @relation(fields: [bookingId], references: [bookingId])

  @@index([rating])
  @@index([createdAt])
}

model NotificationSubscription {
  subscriptionId String   @id @default(uuid())
  email          String?
  phoneNumber    String?
  zipCode        String?
  createdAt      DateTime @default(now())

  @@index([email])
  @@index([phoneNumber])
}

model PilotApplication {
  applicationId              String   @id @default(uuid())
  firstName                  String
  lastName                   String
  email                      String
  phoneNumber                String
  zipCode                    String?
  status                     PilotApplicationStatus @default(SUBMITTED)
  stripeIdentitySessionId    String?
  pilotLicenseNumber         String
  pilotLicenseState          String
  licenseConfirmed           Boolean  @default(false)
  licenseConfirmedAt         DateTime?
  createdAt                  DateTime @default(now())
  pilotId                    String?
  pilotProfile               PilotProfile? @relation(fields: [pilotId], references: [pilotId])

  @@index([email])
  @@index([phoneNumber])
  @@index([pilotId])
}

model FeatureFlag {
  key       String  @id
  enabled   Boolean @default(false)
  note      String?
  updatedAt DateTime @updatedAt
}

enum AdminActionType {
  PILOT_APPROVED
  PILOT_REJECTED
  PILOT_SUSPENDED
  SYSTEM_UPDATE
}

enum StripeAccountStatus {
  PENDING
  ACTIVE
  RESTRICTED
  DISABLED
}

enum PilotApplicationStatus {
  SUBMITTED
  VERIFIED
  REJECTED
}

enum Role {
  PASSENGER
  PILOT
  ADMIN
}

enum PilotStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum FlightStatus {
  UPCOMING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

